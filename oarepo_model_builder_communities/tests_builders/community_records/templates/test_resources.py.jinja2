import copy
{{ published_record.record.class|generate_import }}
{{ draft_record.record.class|generate_import }}

def test_create_record_in_community(
    users,
    identities,
        logged_client_request,
    minimal_community,
    get_or_create_community,
    base_urls,
    search_clear,
):
    owner = users[0]
    owner_identity = identities[0]
    community = get_or_create_community(owner_identity, minimal_community)
    community_id = str(community.id)

    response = logged_client_request(owner, "post",
        f"{base_urls['base_community_records_url']}{community_id}/records", json={}
                     )
    assert response.status_code == 201
    assert response.json["parent"]["communities"]["default"] == community_id
    assert response.json["parent"]["communities"]["ids"] == [community_id]

    record_id = response.json["id"]

    read_record = logged_client_request(owner, "get",
                                  f"{base_urls['base_url']}{record_id}/draft")
    assert read_record.status_code == 200
    assert read_record.json["parent"]["communities"]["default"] == community_id
    assert read_record.json["parent"]["communities"]["ids"] == [community_id]

def test_search(
    users,
    identities,
    logged_client_request,
    minimal_community,
    get_or_create_community,
    base_urls,
    create_record_with_community,
    publish_record,
    search_clear,
):
    owner = users[0]
    owner_identity = identities[0]
    minimal_community2 = copy.deepcopy(minimal_community)
    minimal_community2['slug'] = "second"

    community_1 = get_or_create_community(owner_identity, minimal_community)
    community_2 = get_or_create_community(owner_identity, minimal_community2)

    record11 = create_record_with_community(
        owner_identity, owner, {"slug": minimal_community["slug"]}
    )
    record12 = create_record_with_community(
        owner_identity, owner, {"slug": minimal_community["slug"]}
    )
    record21 = create_record_with_community(
        owner_identity, owner, {"slug": minimal_community2["slug"]}
    )
    record11 = publish_record(record11)
    record12 = publish_record(record12)
    record21 = publish_record(record21)

    {{ published_record.record.class|base_name }}.index.refresh()
    {{ draft_record.record.class|base_name }}.index.refresh()

    response_community1 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_1.id}/records")
    response_community2 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_2.id}/records")

    assert len(response_community1.json["hits"]["hits"]) == 2
    assert len(response_community2.json["hits"]["hits"]) == 1

    assert {response_community1.json["hits"]["hits"][0]["id"], response_community1.json["hits"]["hits"][1]["id"]} == {record11["id"], record12["id"]}
    assert response_community2.json["hits"]["hits"][0]["id"] == record21["id"]


def test_search_drafts(
    users,
    identities,
    logged_client_request,
    minimal_community,
    get_or_create_community,
    base_urls,
    create_record_with_community,
    publish_record,
    search_clear,
):
    owner = users[0]
    owner_identity = identities[0]
    minimal_community2 = copy.deepcopy(minimal_community)
    minimal_community2['slug'] = "second"

    community_1 = get_or_create_community(owner_identity, minimal_community)
    community_2 = get_or_create_community(owner_identity, minimal_community2)

    record1 = create_record_with_community(
        owner_identity, owner, {"slug": minimal_community["slug"]}
    )
    record2 = create_record_with_community(
        owner_identity, owner, {"slug": minimal_community2["slug"]}
    )

    {{ published_record.record.class|base_name }}.index.refresh()
    {{ draft_record.record.class|base_name }}.index.refresh()

    response_record1 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_1.id}/records")
    response_record2 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_2.id}/records")

    response_draft1 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_1.id}/draft/records")
    response_draft2 = logged_client_request(owner, "get", f"{base_urls['base_community_records_url']}{community_2.id}/draft/records")

    assert len(response_record1.json["hits"]["hits"]) == 0
    assert len(response_record2.json["hits"]["hits"]) == 0

    assert len(response_draft1.json["hits"]["hits"]) == 1
    assert len(response_draft2.json["hits"]["hits"]) == 1

    assert response_draft1.json["hits"]["hits"][0]["id"] == record1.json["id"]
    assert response_draft2.json["hits"]["hits"][0]["id"] == record2.json["id"]
